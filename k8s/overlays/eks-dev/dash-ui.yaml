apiVersion: apps/v1
kind: Deployment
metadata:
  name: dash-ui
  namespace: ids
spec:
  replicas: 2
  selector:
    matchLabels: { app: dash-ui }
  template:
    metadata:
      labels: { app: dash-ui }
    spec:
      containers:
        - name: ui
          image: 002232587129.dkr.ecr.af-south-1.amazonaws.com/ids-ui:latest
          imagePullPolicy: Always
          command: ["gunicorn"]
          args: ["-b","0.0.0.0:8050","-w","2","--threads","4","--timeout","120","--access-logfile","-","ids_unsw.ui.app_dash:server"]
          ports:
            - containerPort: 8050
          env:
            - name: IDS_API_URL
              value: http://ids-api:8000
            - name: IDS_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: ids-api-secrets
                  key: IDS_API_TOKEN
          readinessProbe:
            httpGet: { path: "/", port: 8050 }
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 6
          livenessProbe:
            httpGet: { path: "/_dash-layout", port: 8050 }
            initialDelaySeconds: 20
            periodSeconds: 20
            timeoutSeconds: 2
            failureThreshold: 6
          resources:
            requests: { cpu: "100m", memory: "256Mi" }
            limits:   { cpu: "500m", memory: "512Mi" }
---
apiVersion: v1
kind: Service
metadata:
  name: dash-ui
  namespace: ids
spec:
  type: LoadBalancer
  selector: { app: dash-ui }
  ports:
    - port: 80
      targetPort: 8050

name: Build & Deploy to EKS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  EKS_CLUSTER: ${{ secrets.EKS_CLUSTER }}
  K8S_NAMESPACE: ${{ secrets.K8S_NAMESPACE }}
  API_IMAGE: ids-unsw-api
  UI_IMAGE: ids-ui

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (secrets mode)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region "$AWS_REGION" \
            | docker login --username AWS --password-stdin "$ECR_REGISTRY"

      # ---- Build & push API ----
      - name: Build API image
        run: |
          docker build -f Dockerfile.api -t "$ECR_REGISTRY/$API_IMAGE:latest" \
            -t "$ECR_REGISTRY/$API_IMAGE:${GITHUB_SHA}" .
      - name: Push API image
        run: |
          docker push "$ECR_REGISTRY/$API_IMAGE:latest"
          docker push "$ECR_REGISTRY/$API_IMAGE:${GITHUB_SHA}"

      # ---- Build & push UI ----
      - name: Build UI image
        run: |
          docker build -f Dockerfile.ui -t "$ECR_REGISTRY/$UI_IMAGE:latest" \
            -t "$ECR_REGISTRY/$UI_IMAGE:${GITHUB_SHA}" .
      - name: Push UI image
        run: |
          docker push "$ECR_REGISTRY/$UI_IMAGE:latest"
          docker push "$ECR_REGISTRY/$UI_IMAGE:${GITHUB_SHA}"

      # ---- Deploy to EKS ----
      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: "latest"

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region "$AWS_REGION" --name "$EKS_CLUSTER"

      # Apply kustomize overlay (ids-api resources, dash-ui svc/deploy)
      - name: Apply Kustomize overlay
        run: kubectl apply -k k8s/overlays/eks-dev

      # Point the running Deployments at the *exact* new tags to force a rollout
      - name: Roll deployments to new images by commit
        run: |
          kubectl -n "$K8S_NAMESPACE" set image deploy/ids-api api="$ECR_REGISTRY/$API_IMAGE:${GITHUB_SHA}"
          kubectl -n "$K8S_NAMESPACE" set image deploy/dash-ui ui="$ECR_REGISTRY/$UI_IMAGE:${GITHUB_SHA}"

      - name: Wait for rollouts
        run: |
          kubectl -n "$K8S_NAMESPACE" rollout status deploy/ids-api
          kubectl -n "$K8S_NAMESPACE" rollout status deploy/dash-ui
